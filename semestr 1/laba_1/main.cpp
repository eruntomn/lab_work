#include <iostream>
#include <iomanip>
using namespace std;

int main()
{
    // Переменной называется именованная ячейка памяти. Каждая переменная имеет свой тип и размер.
    // Типы данных:
    // 1. Целочисленный тип данных
    // 1.1 Char - тип, хранящий символ в кодировке ASCII. Имеет размер 1 байт. Является знаковым.
    // Может принимать любое значение от -128 до 127.
    char s = 67;
    cout << s << endl; // Выведет  C, тк в таблице символ под номером 67 = C.

    // 1.2 Short - представляет целое число в диапазоне от -32768 до 32767. Занимает 2 байта.
    short k = -88;
    cout << k << endl;

    // 1.3 Int - представляет целочисленный тип данных, имеющий размер 4 байта. 
    // В него может входить любое число из диапазона: -2^31 до 2^31-1. Является знаковым.
    int d = -95865876;
    cout << d << endl;

    // 1.4 Long Long - представляет целое число в диапазоне от -2^63 до 2^63-1. 
    // Имеет размер 8 байт. Является знаковым.
    long long l = -922337203685477800;
    cout << l << endl;

    // 1.5 Unsigned int - представляет положительное целое число в диапазоне от 0 до 2^32-1.
    // Является беззнаковым.
    unsigned int m = 4294967297;
    cout << m << endl; // Выдаст 1, потому что число перескачило за границу диапазона

    // 2. Символьный тип данных
    // 2.1 Char - тип, хранящий символ в кодировке ASCII. Имеет размер 1 байт. Является знаковым.
    // Может принимать любое значение от -128 до 127.
    char s = 67;
    cout << s << endl; // Выведет  C, тк в таблице символ под номером 67 = C.

    // 3. Вещественный тип данных
    // 3.1 Float - вещественное число одинарной точности, занимающее 4 байта. 
    // Позволяет определить точность до 6-7 знаков после запятой. Имеет диапазон от -3.4E-38 до 3.4E+38.
    float n = 4.69868009;
    cout << n << endl; // Выведет 4.69868, отбросив нули, несмотря на идущую следом девятку.

    // 3.2 Double - вещественное число двойной точности, занимающее 8 байт. 
    // Позволяет определить точность до 15-16 знаков после запятой. Имеет диапазон от -1.7E-308 до 1.7E+308.
    double j = -16.9357294057274985;
    cout << setprecision(16) << fixed << j << endl; // Вывелось число -16.9357294057274999 включающее в себя 16 знаков после запятой с округлением.

    // 4. Логический тип данных 
    // 4.1 Bool - занимет 1 байт, может хранить 2 значенияЖ правда(true), ложь(false)
    bool isOne{ true };
    cout << isOne << endl; // преобразовал единицу в значение true


    cout << "char, 1 byte, -128...127" << endl;
    cout << "short, 2 byte, -32768...32767" << endl;
    cout << "int, 4 byte, -2^31...2^31-1" << endl;
    cout << "long long, 8 byte, -2^63...2^63-1" << endl;
    cout << "unsigned int, 4 byte, 0...2^32-1" << endl;
    cout << "float, 4 byte, -3.4 * 10 ** 38...3.4 * 10 ** 38" << endl;
    cout << "double, 8 byte, -1.7*10**-308...1.7*10**308" << endl;
    cout << "bool, 1 byte, true or false" << endl;

    cout << "int: 2 * 3 + 10 * (-7) " << "= " << 2 * 3 + 10 * (-7) << endl;
    cout << "short: 2 * 3 + 10 * (-7) " << "= " << 2 * 3 + 10 * (-7) << endl;
    char s1 = 35 + 63;
    cout << "char: 35 + 63 " << "= " << s1 << endl;
    unsigned int s2 = 2 * 3 + 10 * (-7);
    cout << "unsigned int: 2 * 3 + 10 * (-7) " << "= " << s2 << endl;
    float s3 = 1.0 * 10 / 3;
    cout << "float: 10 / 3 " << "= " << s3 << endl;
    double s4 = 1.0 * 10 / 7;
    cout << "double: 10 / 7 " << "= " << s4 << endl;
    bool s5 = 5 < 0;
    cout << "bool: 5 < 0 ?" << " = " << s5 << endl;
    return 0;
}